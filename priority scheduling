#include <stdio.h>

#define MAX_PROCESSES 10

typedef struct {
    int pid; // process ID
    int priority; // process priority (higher value = higher priority)
    int burst_time; // time required to complete the process
} Process;

int main() {
    Process processes[MAX_PROCESSES];
    int num_processes, i, j, highest_priority_index;
    
    // Input the number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &num_processes);
    
    // Input the details of each process
    for (i = 0; i < num_processes; i++) {
        printf("Enter details of process %d:\n", i+1);
        printf("PID: ");
        scanf("%d", &processes[i].pid);
        printf("Priority: ");
        scanf("%d", &processes[i].priority);
        printf("Burst time: ");
        scanf("%d", &processes[i].burst_time);
    }
    
    // Sort the processes based on priority (highest priority first)
    for (i = 0; i < num_processes; i++) {
        highest_priority_index = i;
        for (j = i+1; j < num_processes; j++) {
            if (processes[j].priority > processes[highest_priority_index].priority) {
                highest_priority_index = j;
            }
        }
        if (highest_priority_index != i) {
            // Swap the processes
            Process temp = processes[i];
            processes[i] = processes[highest_priority_index];
            processes[highest_priority_index] = temp;
        }
    }
    
    // Execute the processes in order of priority
    printf("\nExecuting processes in order of priority:\n");
    for (i = 0; i < num_processes; i++) {
        printf("Executing process %d (PID %d) for %d units of time.\n", i+1, processes[i].pid, processes[i].burst_time);
    }
    
    return 0;
}
