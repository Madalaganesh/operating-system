#include <stdio.h>

#define MAX_PROCESSES 100

struct Process {
    int pid;        // process ID
    int burst_time; // burst time of process
    int priority;   // priority of process
};

// sort processes by priority (highest priority first)
void sort_processes(struct Process processes[], int n) {
    int i, j;
    struct Process temp;

    for (i = 0; i < n - 1; i++) {
        for (j = i + 1; j < n; j++) {
            if (processes[i].priority < processes[j].priority) {
                temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
        }
    }
}

int main() {
    int i, j, n, current_time, remaining_time[MAX_PROCESSES], total_waiting_time = 0, total_turnaround_time = 0;
    struct Process processes[MAX_PROCESSES];

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    for (i = 0; i < n; i++) {
        printf("Enter the burst time and priority of process %d: ", i + 1);
        scanf("%d %d", &processes[i].burst_time, &processes[i].priority);
        processes[i].pid = i + 1;
        remaining_time[i] = processes[i].burst_time;
    }

    sort_processes(processes, n);

    printf("\nGantt Chart:\n");
    printf("0");

    for (current_time = 0; n > 0; ) {
        i = 0;
        while (i < n && processes[i].burst_time > remaining_time[i]) {
            i++;
        }
        if (i == n) {
            current_time++;
            continue;
        }
        for (j = i + 1; j < n; j++) {
            if (processes[j].burst_time <= remaining_time[j] && processes[j].priority > processes[i].priority) {
                i = j;
            }
        }
        printf(" | P%d | %d ", processes[i].pid, ++current_time);
        remaining_time[i]--;
        if (remaining_time[i] == 0) {
            total_waiting_time += current_time - processes[i].burst_time;
            total_turnaround_time += current_time;
            printf(" |");
            for (j = i; j < n - 1; j++) {
                processes[j] = processes[j + 1];
                remaining_time[j] = remaining_time[j + 1];
            }
            n--;
        }
    }

    printf("\n\nAverage waiting time: %.2f", (float) total_waiting_time / n);
    printf("\nAverage turnaround time: %.2f", (float) total_turnaround_time / n);

    return 0;
}
